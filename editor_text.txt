module List<T>
{
    Node :: struct {
        next: *Node<T>;
        val: T;
    }
    
    List :: struct {
        head: *Node<T>;
        tail: *Node<T>;
        count: u32;
    }
    
    for_each :: (list: List<T>, fn: (*T) -> void) {
        node := list.head;
        while (node != null) {
            fn(*node.val);
            node = node.next;
        }
    }
    
    create :: () -> List<T>
    {
        result: List<T>;
        result.head = null;
        result.tail = null;
        result.count = cast<u32>0;
        return result;
    }
    
    add :: (list: *List<T>, item: T)
    {
        node := new Node<T>;
        node.val = item;
        node.next = null;
        
        if list.head == null
        {
            list.head = node;
            list.tail = node;
            return;
        }
        
        list.tail.next = node;
        list.tail = node;
        list.count = list.count + cast<u32>1;
    }
}

Player :: struct {
    alive: bool;
    age: int;
    name: String;
}

player_make :: (alive: bool, age: int, name: String) -> Player
{
    player: Player;
    player.alive = alive;
    player.age = age;
    player.name = name;
    return player;
}

player_print :: (player: *Player) 
{
    print_string(player.name);
    print_string(" alive: ");
    print_bool(player.alive);
    print_string(" age: ");
    print_i32(player.age);
    print_line();
}

main :: () 
{
    players := List<Player>::create(); 
    List<Player>::add(*players, player_make(true, 15, "Fred"));
    List<Player>::add(*players, player_make(true, 15, "Manni"));
    List<Player>::add(*players, player_make(true, 15, "Herbert"));
    List<Player>::for_each(players, *player_print);
}