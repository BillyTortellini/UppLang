module List
{
    List_Node :: struct
    {
        value: int;
        next: *List_Node;
    }

    List :: struct
    {
        head: *List_Node;
    }
    
    print :: (list: *List)
    {
        node := list.head;
        print_string("List: ");
        while node != nullptr
        {
            print_i32(node.value);
            print_string(" ");
            node = node.next;
        }
        print_line();
    }
    
    add :: (list: *List, value: int)
    {
        if list.head == nullptr
        {
            print_string("Adding Head");
            list.head = new List_Node;
            list.head.value = value;
            list.head.next = nullptr;
            return;
        }
        print_string("Adding node\n");
        node := list.head;
        while node.next != nullptr {
            print_string("  next\n");
            node = node.next;
        }
        node.next = new List_Node;
        node.next.next = nullptr;
        node.next.value = value;
    }

    create :: () -> List
    {
        list: List;
        list.head = nullptr;
        return list;
    }
    
    destroy :: (list: *List)
    {
        node := list.head;
        while node != nullptr
        {
            tmp := node;
            node = node.next;
            print_string("Deltet\n");
            delete tmp;
        }
    }
}

main :: ()
{
    list := List::create();
    List::add(*list, 1);
    List::add(*list, 2);
    //List::add(*list, 3);
    //List::print(*list);
    List::destroy(*list);
}