Ideas that just come to mind:
-----------------------------
PrintF Debugging could be replaced with memory visualizer
'Destructors' could be generated with metaprogramming, simple initializors too
Differentiate States and Tags in the language
Functions may just be compile time known function pointers?
Should we have compile-time known arguments, are they the same as template args?
Hardcoded functions should be removed at some point
Context struct could live in thread-local memory
Auto cast keyword would be nice and easy
Delete IR_Code, just use modtree for translation
Syntax guided editor would be cool I guess
Are stacked pointers a reasonable idea (**int)? Where would i use them
Maybe have struct type signature differentiate having a symbol (For struct name and member names) and a signature
Automated parameter deduction (Like macros taking names from outer scope)

Code Ideas:
-----------
Maybe think about making initializers helpers for expressions/statements?
Const expression evaluation maybe after creation?
Symbol template infos add info if symbol is templated
Symbols should keep track of references (Where they are used)
Redo template syntax, only allow on functions/structs
Rename nullptr to null




TODO NOW:
---------
Function pointers are only accessible in variables, not in expressions.
Load other text files with #load
Create automatic test cases
Compile time known expressions for array size, see below





Tactics:
--------
 1. Sized arrays with integers
 2. Value for Unary operators
 3. Value for Binary operators
 4. Value for variables
 5. Bake for function execution

Next Up:
--------
 * Compile time code execution + Templates
 * Tags and static analyser

Features TODO:
    - Function overhaul: Multiple return values, Named return values
    - Lambdas, Struct/Function definitions inside code-blocks
    - Symbol Tables: Using Modules/Structs, importing Symbol-References into current scope
    - Integer/Float literal overhaul using correct Type depending on Context, 
    - Type introspection (Size, Alignment, Members...), Any-Type
    - Array initializiation syntax
    - Location information (Unique Location, file/line number), Stack-Introspection
    - Tag-System (const-tag + static analyser)
    - Unions and Enums, some type of switch

NOTES:
------
 * Next stuff:
    - Jump to definition fix --> A separate analysis/code generation phase would be nice
    - Code_Completion
    - sizeof required for window creation
    - auto-cast keyword
 * Improve Language:
    - Compile time code-evaluation
    - Enums, structs, unions, switches
    - Tag-System + Static Analyis
 * Improve Editor:
    - Multiple projects
    - Code-Completion
    - Search and Replace


Metaprogramming features:
-------------------------
 * Templates (Types for Containers, Functions/Values for algorithms and interfaces)
 * Macro System (Iterators, Scope_Break, Variable_Define, Code_Insertion... lots of convenience functions)
 * Defer
 * #if (Conditional Compilation)
 * Currying
 * AST-Manipulation (Compile time Execution)
 * Generating source-code (Compile time Execution)


---------------------------
------ ISSUE TRACKER ------
---------------------------

Issues:
-------
 * Templates
    - Structs and functions in templated modules may not use templates
    - Functions created during Template-Analysis should probably be deleted later
    - Globals are currently disabled in a template context
 * Globals
    - Global initializiation order is bad (Depends on dependencies of symbol definitions)

Long-Term Goals:
----------------
 * Debugger
 * Language features (Union/Enum, match, Macros, Compile-Time Execution)
 * Editor features (Search and replace, jump to definition, show context info, refactoring, Code LOD)
 * Maybe implementing Syntax guided Editor
 * Test suite (Now works with the better error system)

More Language features to implement:
------------------------------------
 * Compile time code execution, for types and array indices and stuff
 * Enums, Switch/Match and Unions
 * Tag-System (For constant values, but also other stuff)
   ------- These features are for convenience, but they are not top priority ------
 * Any-Type and Type access (Varargs in this language, maybe use this for printf)
 * Macro-System
 * Iterators
 * Location-Information (Filename, line_number...)
 * Using statement
 * Context (Used for memory allocations, useful in Multi-Threading)
 * Lambdas
 * Default variable initialization (Maybe) with 0, although if the value-analyser works correctly, this should be fine
 * Array access with pointers to arrays
 * Array size should be u64, then iteration is more tedious (casting), but with iterators it should be fine
 * Automatic casting from non-pointer type to pointer in function calls
 * Literal overhaul (What is a float, what isnt...)
 * Syntax for fixed array initialization [int :: 1, 2, 3, 4, 5]
 * Loop statements, maybe loop over array syntax
 * Break/Continue overhaul (Something like: exit_loop, continue_loop, exit_switch, exit loop_iter)
 * Function return value overhaul: Multiple return values or no return value should be possible
 * Variation for simple Dynamic dispatch  (Like interfaces in OO..., similar to dynamic in Rust)

Editor features to implement:
-----------------------------
 * Code-Completion using current symbol table
 * Search and Replace
 * CTRL-R for replace word --> I would need Shift-R, since control R is already Redo
 * Visual Mode/Blockmode (Multicursor)/Visual Line
 * Multi-Window support (Multiple Tabs/Vertical or Horizontal splits, Tabs with shift-Tab)
 * Jump to definition with string search (Maybe Ctrl-F)
 * Undo/Redo Tree History
 * Command recording (@ stuff with vim, altough this could maybe be done better)
 * Tab for indentation/Ctrl-Tab for no indentation
 * Formating with = should remove unneccessary whitespaces/add them where needed, and should ignore comments.
    Actually, this should not be hard even without lexer, since we can count the parenthesis, spaces and other stuff...
 * UTF-8 Support?

Editor-Bugs:
------------
 * Alt-Gr spamming still cancels commands (win32 nonsense)
 * Undo-Redo cursor position still sucks a little (Hint: Save positions after/before command)
 * Non ASCII chars destroy some motions (Currently disabled) (Program crashes)

 Vision for the Programming Language:
 ------------------------------------
  * Compile-Time code execution
  * Static-Analysis in tandum with Tag-System
  * Code-Visualizations in Editor

Ideas that need to be tested:
-----------------------------
 * Implicit parameters in functions, some way of not having to call with all parameters?
 * Using compile-time code-execution for compiler-controll, metaprogramming and static analysis
 * Strong Code-Analysis (Analysing all possible values), with Warning System and user input
 * Tag-System (For const, but also other information, generated by user and compiler)
 * Visualizations for Code, better navigation, module system
 * Non-Destructive Code-Editing for larger modules

 * Tag for not used anymore for variables
 * Compiler supported Dynamic-Array type
 * Hot-Reloading Code
 * Stack-Analysis for Debug information (Or others? E.g. logging)
 * Differentiate break_loop, break_switch, maybe break_scope
 * Redirect debug output to application window
 * Error-Handling with the most recent build of the language

Code Improvements that should be made (When I have time):
----------------------------------------------------
Use String* for string pooling, not identifiers.
Hashing type signatures for lookup, not array search.

Differentiation between errors and Warnings


Intermediate Code should keep positional information, so should the bytecode (Will be necessary for the debugger)
Improved Parser-Error handling. (Function-Parsing Error handling should check each following line if it is a function)

At some point the editor should not render at 60 FPS, but rather update when necessary.
Asynchronous Editor-Compiler architecture, lexing/parse/analysing in background when code gets bigger




