Current Work Item:
------------------
1. Fix Bugs with function return type
1. Bugs when starting to uncomment things (/* and theres an error)

Improvements that should be made (When I have time):
----------------------------------------------------
Semantic Analyse should keep the first definition of each symbol, currently only true for functions
Also Intermediate Code should keep positional information

Open Questions:
---------------
Do i need another bytecode for execution, or can I just use the intermediate code for that?
I mean one could interprete an AST, but it is too slow and it is kinda shit. 
The IM-Code is actually a lot more low level (Linearized), and a lot of complicated
problems are already solved. 
The problems with the IM: 
    * Loops and Ifs are not jumps, so the interpreter needs to keep a stack on those.
    * Function calls have dynamic_array, which makes copying hard and its also somewhat slow?
I think I actually want to go a little bit higher level with the IM, and go lower level with the
generated bytecode, so lets just do the bytecode now. Also when I want to play with it,
I could try to add some optimizations to the bytecode.

Intermediate Code should not hold type information of register results, these should be from semantic analysis
although this is not quite true, since some operations are implicitily given by the AST (Array access and stuff)

Long-Term Goals:
----------------
1. Intermediate Code working 
2. Generate Bytecode from the new Intermediate Code
3. Array-Access and Pointers working
4. Structs and Member-Access working
5. Hard-Coded functions for print, new and delete
6. C-Backend
7. Calling C-Functions in C-Backend
8. Calling C-Functions in Bytecode interpreter
9. More language features

More Language features to implement:
------------------------------------
Primitive Types
Structs
No return value on functions
Multiple return values on functions
Global Data
Defer statement
Tagged Unions
Any-Type and Type access (Varargs in this language)
Location (Stack thing)
Modules
Constant values and other modifiers for variables
Code/Value-Analysis
Compile-Time Bytecode execution
Variation for simple Dynamic dispatch  (Like interfaces in OO...)
Hot-Code reloading
Context
Iterators
Macro-System
