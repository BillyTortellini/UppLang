Current Work Item:
------------------
 * Hard-Coded functions for print, maybe input or random int (Dont need too much, because this will be irrelevant once we have C-Bindings)
 * Structs
 * Syntax for new/delete

Long-Term Goals:
----------------
 * More language features
 * C-Backend
 * Debugger
 * Calling C-Functions
 * More Editor features

More Language features to implement:
------------------------------------
 * Hard-Coded functions for print, maybe input or other stuff
 * Structs
 * Syntax for new/delete
   ------- Before this I should implement some editor features (Linter at least) -------
 * Default variable initialization (0)
 * Primitive Types (And calculating with them, e.g. u8, u16, u32...) INFO: Array bounds check should then be done with u32, not i32, so negative values are detected
 * Casting (Float/Int implicit, from smaller to bigger implicit?, reinterpret cast thing)
 * Global Data
 * Strings
 * Syntax for fixed array initialization [int :: 1, 2, 3, 4, 5]
   ------- Before this I should fix all the editor bugs ------
 * Function return value overhaul: Multiple return values or no return value should be possible
 * Function pointers, lambdas
 * Defer statement
 * Tagged Unions
 * Location-Information (Filename, line_number...)
 * Any-Type and Type access (Varargs in this language)
 * Code-Polymorphism (Template/Generic System)
 * Modules
 * Constant values (Maybe as the first iteration of the tag-system)
 * Variation for simple Dynamic dispatch  (Like interfaces in OO..., similar to dynamic in Rust)
 * Iterators
 * Macro-System
 * Context (Used for memory allocations, useful in Multi-Threading)

Editor features to implement:
-----------------------------
 * Linter (Auto formating)
 * Autocompletion (Question if I want it to be just a text featuer, or using the ast)
 * Visual Mode/Blockmode (Multicursor)/Visual Line
 * Undo/Redo Tree History
 * Command recording (@ stuff with vim, altough this could maybe be done better)

Editor-Bugs:
------------
 * Repeat last search does not differentiate 'f'/'t'/forward backward
 * 'r' is buggy on line end, and on empty lines
 * Undo-Redo cursor position still sucks a little (Hint: Save positions after/before command)
 * Non ASCII chars destroy some motions (Program crashes)
 * Alt-Gr spamming still cancels commands (win32 nonsense)
 * % does not jump on empty parenthesis () {}
 * O does not work on first line
 * dd with numbers seems to not take the last number
 * put with 'dd'ed lines is also a bit weird
 * CTRL-W in insert mode deletes all newlines too

Ideas that need to be tested:
-----------------------------
 * Redirect debug output to application window
 * Error-Handling with the most recent build of the language
 * Using compile-time code-execution for metaprogramming and other stuff
 * Code-Analysis with data-value semantics (Tag System)
 * Hot-Code Reloading
 * Stack-Analysis for Debug information (Or others?)

Improvements that should be made (When I have time):
----------------------------------------------------
Replace type_index int with just a Type_Signature pointer. This way, the type_system
struct is not necessary to get to type information, and comparisions are also possible by just
comparing the pointers. This seems way better than the stuff I currently have.
Also replace name_id with name_handle in lexer. I think I would like to do that now.

Semantic Analyse should keep the node_index of the first definition of each symbol (Symbol table), 
currently only true for functions. 
Intermediate Code should keep positional information, so should the bytecode (Will be necessary for the debugger)
Improved Parser-Error handling. (Function-Parsing Error handling should check each following line if it is a function)

Open Questions:
---------------
Intermediate Code should not hold type information of register results, these should be from semantic analysis
although this is not quite true, since some operations are implicitily given by the AST (Array access and stuff)
But it would be nice if the intermediate Code + Type-System is enough to create the final output, 
so its not too bad to copy the type from the semantic analyser

How does the syntax for array initialization look like?
    C:
        int x[] = {1, 2, 3, 4, 5}; 
    UppLang:
        x: []int = [1, 2, 3, 4, 5]; // Could this be a potential problem with array access? -> Dont really think so




