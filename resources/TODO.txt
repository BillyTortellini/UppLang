Current Work Item:
------------------
 * Linter, jump to definition, fix editor bugs
 * Casting, Float/Int implicit, from smaller to bigger implicit?, reinterpret cast thing, Array sized to unsized, Member access with . on pointer
 * Implement List or dynamic array 

Long-Term Goals:
----------------
 * More language features
 * C-Backend
 * Debugger
 * Calling C-Functions (Look into dyncall)
 * More Editor features

More Language features to implement:
------------------------------------
   ------- Before this I should implement some editor features (Linter at least) -------
 * Default variable initialization (0), probably
 * Primitive Types (And calculating with them, e.g. u8, u16, u32...) INFO: Array bounds check should then be done with u32, not i32, so negative values are detected
 * Global Data
 * Strings
 * Syntax for fixed array initialization [int :: 1, 2, 3, 4, 5]
   ------- Before this I should fix all the editor bugs ------
 * Function return value overhaul: Multiple return values or no return value should be possible
 * Function pointers, lambdas
 * Defer statement
 * Tagged Unions
 * Location-Information (Filename, line_number...)
 * Any-Type and Type access (Varargs in this language)
 * Code-Polymorphism (Template/Generic System)
 * Modules
 * Constant values (Maybe as the first iteration of the tag-system)
 * Variation for simple Dynamic dispatch  (Like interfaces in OO..., similar to dynamic in Rust)
 * Iterators
 * Macro-System
 * Context (Used for memory allocations, useful in Multi-Threading)

Editor features to implement:
-----------------------------
 * Linter (Auto-formating)
 * Jump to definition, so i can jump between functions, and also jump back
 * Autocompletion using current symbol table
 * Visual Mode/Blockmode (Multicursor)/Visual Line
 * Undo/Redo Tree History
 * Command recording (@ stuff with vim, altough this could maybe be done better)

Editor-Bugs:
------------
 * Repeat last search does not differentiate 'f'/'t'/forward backward
 * 'r' is buggy on line end, and on empty lines
 * Undo-Redo cursor position still sucks a little (Hint: Save positions after/before command)
 * Non ASCII chars destroy some motions (Program crashes)
 * Alt-Gr spamming still cancels commands (win32 nonsense)
 * % does not jump on empty parenthesis () {}
 * O does not work on first line
 * dd with numbers seems to not take the last line
 * put with 'dd'ed lines is also a bit weird
 * CTRL-W in insert mode deletes all newlines too
 * When the text file is empty, syntax highlighting crashes

Ideas that need to be tested:
-----------------------------
 * Redirect debug output to application window
 * Error-Handling with the most recent build of the language
 * Using compile-time code-execution for metaprogramming and other stuff
 * Code-Analysis with data-value semantics (Tag System)
 * Hot-Code Reloading
 * Stack-Analysis for Debug information (Or others? E.g. logging)

Improvements that should be made (When I have time):
----------------------------------------------------
Replace all namespace ENUM types with enum class things.

Create a Compiler struct that holds all the relevant stuff
    * Lexer
    * Parser
    * Analyser
    * IM-Generator
    * Bytecode-Generator
    * Bytecode-Interpreter
And just call the Compiler from the text editor --> This has to be done eventually,
but then I need to rewrite how things are access through the compiler.

Maybe we could also use String* for names, since then I only need to compare string pointers, and not actually strings.
This would also make debuggin so much easier, since we would see the names of things.

Semantic Analyse should keep the node_index of the first definition of each symbol (Symbol table), 
currently only true for functions. 
Intermediate Code should keep positional information, so should the bytecode (Will be necessary for the debugger)
Improved Parser-Error handling. (Function-Parsing Error handling should check each following line if it is a function)

Open Questions:
---------------
How does the syntax for array initialization look like?
    C:
        int x[] = {1, 2, 3, 4, 5}; 
    UppLang:
        x: []int = [1, 2, 3, 4, 5]; // Could this be a potential problem with array access? -> Dont really think so

How do i implement dynamic arrays?
I think it would be nice? if the language would know about these
    x: [..]int;
    new [5]int;
Check out Jonathan Blows streams to check what hes doing




