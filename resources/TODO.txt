Current Work Item:
------------------
 * Fix Cursor not displaying bug
 * Rethink Renderpass design, I am not so sure anymore if it is really that usefull
 * Rendering_Resource_Manager, having names for renderpasses
 * CPU Mesh creator with attributes in AoS style (Maybe, not that important, but also not that hard...)

 I need to think WHAT i want from renderpasses and framebuffers:
    Currently if I want to render to texture this is annoying, since I manually have
    to bind and unbind framebuffers, call the renderpass and so on.
    Thats already a good reason, another one being that I want GUI controll over it
    I also can do state sorting after I have collected all the uniforms

 * Rendering Overhaul, think about shaders, 2D-Rendering, Framebuffers, Images, GUI
 * 2D-Rendering with:
    - Rectangles
    - Circles
    - Lines
    - Curves
    - Triangles, maybe arbitrary polygons
    - Text
    - Images
 * Extend GUI system (Overlaps, Movable-Windows, Common-Style (size, color...), Focus with Key_Message_Parsing, add Text_Editor), use to visualize Render_Passes

Ideas for change:
    * Renderpasses
    * Render_Resource_Manager (Meshes, Textures, Framebuffers, Renderpasses, Shaders)
    * Mesh offline representation
    * Shaderprogram should remember which uniforms are set, and which arent



Long-Term Goals:
----------------
 * Calling C-Functions in Bytecode (Look into dyncall)
 * C-Backend
 * Calling C-Functions in the C-Backend (Maybe with Clang for header file parsing)
 * Debugger
 * More language features
 * More Editor features

More Language features to implement:
------------------------------------
 * Function pointers
 * Defer
 * Enums
 * switch
 * Modules
 * Tag-System (For constant values, but also other stuff)
 * Code-Polymorphism (Template/Generic System)

   ------- These features are for convenience, but they are not top priority ------
 * Using statement
 * Tagged Unions
 * Location-Information (Filename, line_number...)
 * Any-Type and Type access (Varargs in this language, maybe use this for printf)
 * Iterators
 * Macro-System
 * Context (Used for memory allocations, useful in Multi-Threading)
 * Lambdas
 * Default variable initialization (Maybe) with 0, although if the value-analyser works correctly, this should be fine
 * Array access with pointers to arrays
 * Array size should be u64, then iteration is more tedious (casting), but with iterators it should be fine
 * Automatic casting from non-pointer type to pointer in function calls
 * Literal overhaul (What is a float, what isnt...)
 * Syntax for fixed array initialization [int :: 1, 2, 3, 4, 5]
 * Loop statements, maybe loop over array syntax
 * Function return value overhaul: Multiple return values or no return value should be possible
 * Variation for simple Dynamic dispatch  (Like interfaces in OO..., similar to dynamic in Rust)

Editor features to implement:
-----------------------------
 * Limit 'f' 'F' 't' 'T' search range, I think jumping with those should not be possible
 * Search and Replace
 * CTRL-R for replace word --> I would need Shift-R, since control R is already Redo
 * Visual Mode/Blockmode (Multicursor)/Visual Line
 * Multi-Window support (Multiple Tabs/Vertical or Horizontal splits)
 * Autocompletion using current symbol table
 * Jump to definition with string search (Maybe Ctrl-F)
 * Undo/Redo Tree History
 * Command recording (@ stuff with vim, altough this could maybe be done better)
 * Tab for indentation/Ctrl-Tab for no indentation
 * Formating with = should remove unneccessary whitespaces/add them where needed, and should ignore comments.
    Actually, this should not be hard even without lexer, since we can count the parenthesis, spaces and other stuff...
 * UTF-8 Support?

Editor-Bugs:
------------
 * Alt-Gr spamming still cancels commands (win32 nonsense)
 * Undo-Redo cursor position still sucks a little (Hint: Save positions after/before command)
 * Non ASCII chars destroy some motions (Currently disabled) (Program crashes)

 Vision for the Programming Language:
 ------------------------------------
  * Compile-Time code evaluation
  * Code analysis in tandum with Tag-System
  * Code-Visualizations in Editor

Ideas that need to be tested:
-----------------------------
 * Using compile-time code-execution for compiler-controll, metaprogramming and static analysis
 * Strong Code-Analysis (Analysing all possible values), with Warning System and user input
 * Tag-System (For const, but also other information, generated by user and compiler)
 * Visualizations for Code, better navigation, module system
 * Non-Destructive Code-Editing for larger modules

 * Tag for not used anymore for variables
 * Hot-Reloading Code
 * Incremental Builds
 * Stack-Analysis for Debug information (Or others? E.g. logging)
 * Differentiate break_loop, break_switch
 * Redirect debug output to application window
 * Error-Handling with the most recent build of the language

Improvements that should be made (When I have time):
----------------------------------------------------
Proper Error Handling in parser and semantic analyser, with error codes and highlighting things in editor.
Also with differentiation between errors and Warnings

Maybe we could also use String* for names, since then I only need to compare string pointers, and not actually strings.
This would also make debuggin so much easier, since we would see the names of things.

Intermediate Code should keep positional information, so should the bytecode (Will be necessary for the debugger)
Improved Parser-Error handling. (Function-Parsing Error handling should check each following line if it is a function)

At some point the editor should not render at 60 FPS, but rather update when necessary.

Open Questions:
---------------
How does the syntax for array initialization look like?
    C:
        int x[] = {1, 2, 3, 4, 5}; 
    UppLang:
        x: []int = [1, 2, 3, 4, 5]; // Could this be a potential problem with array access? -> Dont really think so

How do i implement dynamic arrays?
I think it would be nice? if the language would know about these
    x: [..]int;
    new [5]int;
Check out Jonathan Blows streams to check what hes doing

At which stage does metaprogramming/template instances/automatic code generation happen?
I currently almost think that I need another AST-Tree for this, since
I dont think I want to manipulate code on the Intermediate Representation level, due to
the Access things and the expression evaluation things and all this kinda complicated stuff.

This generally concerns me for defer, templates and macros, since doing this on an AST-Level
seems a lot simpler (This isn't confirmed yet). I could also split variable definitions in two things
(Currently define, define-assign, define-infer) and add implicit conversions or return statements when necessary.
Thought: I think templates can ONLY be done on the AST-Level, since the Intermediate Representation already has
exact instructions for binary operators and other stuff.




