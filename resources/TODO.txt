Next features:
---------
 * Unions
 * Pointer usage rework
 * Auto casts, named breaks/continues, multiple returns, Array-Initialization Syntax
 * Constant variables
 * Testcases for all new features
 * Type-Information in language, type_of, Any-Type
 * Tagged enums, anonymous types (Structs, enums, unions), type constructor
 * Rework templates to use comptime values
 * Iteration (Macros?)
 * Generating source code with runtime code execution

Syntax what operators are in use:
---------------------------------
    +   ... Addition
    -   ... Subtraction, Unary negate
    *   ... Multiplication/Address Of/Pointer type constructor
    &   ... Dereference
    /   ... Division
    %   ... Modulo
    !   ... Logical not

    <   ... Less 
    >   ... Greater
    <=  ... Less Equals
    >=  ... Greater Equals
    ==  ... Equals
    !=  ... Not Equals

    &&  ... Logical And
    ||  ... Logical Or

    ()  ... Function call/Function definition
    []  ... Array definition/Index operation
    {}  ... Code Block operation
    <>  ... Template argument parenthesis

    "   ... String delimiters
    #   ... Extern declarations (#load)
    .   ... Member access/Auto access
    ;   ... Statement delimiter
    ,   ... List item delimiter

    :   ... Variable definition
    :=  ... Define-Infer
    ::  ... Constant Definition
    ->  ... Function return value

    //  ... Single line comment
    /*  ... Multiline comment start
    */  ... Multiline comment end

Currently unused but plans exist:
    _   ... Unused value in multiple returns
    '   ... Char delimiter (Not implemented yet)
    $   ... Fast Template declaration (Not implemented yet)
    @   ... Annotations
    \   ... String delimiters

Open Characters and normal usage
    ~   ... Bitwise Negate
    ^   ... Bitwise XOR
    &   ... Bitwise And
    |   ... Bitwise Or
    >>  ... Bitshift right
    <<  ... Bitshift left
    ?   ... Ternary Operator
    °   ... Nothing
    



Design: Enums, Switches and Unions
----------------------------------
Questions:
    1. How are values referenced in enums (Color::GREEN)
        Usually this results in a symbol lookup, and it errors when Color is not a module.
        This usually also returns a symbol, and the type of the symbol is then looked up.
        In theory I could introduce a new symbol type, and add symbol_tables to 
    2. How is the union tag handled
    3. Syntax overlaps with :: and assignment syntax

Options for enum references:
    * New Symbol type, and handle lookup in symbol table
    * Return something different in Identifier_Lookup
    * Use . Syntax for enum references: Color.Green; Color->Green  Color


There is a problem with the current Syntax, more specifically with the :: Operator.
id :: struct | enum | union | module | (function_params) -> ret_val

x: struct {a: int; b: float;};
x.a = 15;
x.b = 3.7f;

enums:
Color :: enum
{
    RED = 0,
    BLUE,
    GREEN,
    YELLOW = 5,
    WHATEVER
}

x: Color;
x = Color::RED;
x = .RED; // What i probably want
x = .Red;

switch x
{
    Color::RED:
    Color::GREEN: 
        #fall_through;
    Color::YELLOW:
        if Color::is_primary(x) break;
    .RED: 
    else: logg("Not a known color!");
}
If the switch does not contain an else, and we are switching an enum, it is exhaustive, meaning all values need to be checked, 
otherwise it results in an Compile-Error. 
But what about integers? 

Unions:
For almost all of my usecases, I want to have tagged unions, but for compatability with C
I probably also want to have untagged unions in the language...

So I want a syntax where this works more easily, meaning;
 * I dont want to create an enum
 * I want switch integration

Color :: enum
{
    RED :: 1;
    BLUE :: 3,
    GREEN,
    YELLOW = 5,
    WHATEVER
}

States :: bitfield
{
    VALID = 1;
    INVALID;
    SOMETHING;
    MADNESS;
}

Expr :: union
{
    binary_op: struct { // This struct is not anonymous, it is bound to the name Expr::binary_op
        op_type: Binary_Operation_Type;
        operand_left: *Expression;
        operand_right: *Expression;
    }
    variable_read: *Variable;
    function_pointer_read: *function;
}

e: Expr;
e.tag = Expr::binary_op;
e.binary_operation.op_type = Binary_Operation_Type::ADDITION;
e.binary_operation.operand_left = left_op;
e.binary_operation.operand_right = right_op;

bin_op: type_of(Expr::binary_op);


// But maybe I also want anonymous structs, so i can do stuff like
x: struct{x: int; y: int; z:int};
y: enum{x, y, z};
z: union {r: int; g: int; b: int};

// I maybe also want an initialization syntax for structs
vec4 :: struct {r, g, b: float;}

x: vec4 = vec4{r = 5; g = 5; b = 5;};

Then i could have
Expr :: struct
{
    expr_num: int; // Everyone has this
    options: union 
    {
        binary_operation: struct {
            op_type: Binary_Operation_Type;
            operand_left: *Expression;
            operand_right: *Expression;
        };
        variable_read: *Variable;
        function_pointer_read: *Function;
    };
}

e: Expr;
e.options.tag = Expr::options::Tag::binary_operation;
e.options.binary_operation.op_type = 5;

C_Union: union #NoTag
{
    x: Var;
    y: int;
    z: bool;
}

How is the union type set?

smth: Expr::Binary_Operation;
smth.op_type = ...
e.binary_operation = smth.binary_operation;

switch e
{
    Expr::Binary_Operation:
        if (e.binary_operation.op_type) ...
            result = e.binary_operation.operand_left + e.binary_operation.operand_right
    Expr::Variable_Read(var):
        // Var should be a pointer to Expr::variable_read
        add_reference(var, Reference::READ);
    .function_pointer_read(func):
}

struct ModTree_Expression
{
    ModTree_Expression_Type expression_type;
    Type_Signature* result_type;
    Expression_Value value;
    union 
    {
        struct 
        {
            ModTree_Binary_Operation_Type operation_type;
            ModTree_Expression* left_operand;
            ModTree_Expression* right_operand;
        } binary_operation;
        struct 
        {
            ModTree_Unary_Operation_Type operation_type;
            ModTree_Expression* operand;
        } unary_operation;


U :: union
{
    
}




Ideas that just come to mind:
-----------------------------
PrintF Debugging could be replaced with memory visualizer
'Destructors' could be generated with metaprogramming, simple initializors too
Differentiate States and Tags in the language
Should we have compile-time known arguments, are they the same as template args?
Context struct could live in thread-local memory
Auto cast keyword would be nice and easy
Syntax guided editor would be cool I guess
Are stacked pointers a reasonable idea (**int)? Where would i use them
Always cast to appropriate pointer type/take reference, but have special syntax for taking memory/pointer assignments
Automated parameter deduction (Like macros taking names from outer scope)
Automated module/Enum scope finding (node->type == .UNDEFINED)
break continue with identifiers, named scopes, break to named scope
Meta-Programming code modifications may be easy if executed code must be unmodified, and only finaly code is modified

Code Ideas:
-----------
Type_System should maybe do more, like templates, parameter names, struct names
Symbol template infos add info if symbol is templated
Symbols should keep track of references (Where they are used)
Maybe think about making initializers helpers for expressions/statements?
Const expression evaluation maybe after creation?
Redo template syntax, only allow on functions/structs
Delete IR_Code, just use modtree for translation
Functions may just be compile time known function pointers?
Hardcoded functions should be removed at some point
AST_Node only really needs type and child information for processing, parent and tokenrange could be in another array and multiple structures could exist for this










Next Up:
--------
 * Compile time code execution + Templates
 * Tags and static analyser

Features TODO:
    - Function overhaul: Multiple return values, Named return values
    - Lambdas, Struct/Function definitions inside code-blocks
    - Symbol Tables: Using Modules/Structs, importing Symbol-References into current scope
    - Integer/Float literal overhaul using correct Type depending on Context, 
    - Type introspection (Size, Alignment, Members...), Any-Type
    - Array initializiation syntax
    - Location information (Unique Location, file/line number), Stack-Introspection
    - Tag-System (const-tag + static analyser)
    - Unions and Enums, some type of switch

NOTES:
------
 * Next stuff:
    - Jump to definition fix --> A separate analysis/code generation phase would be nice
    - Code_Completion
    - sizeof required for window creation
    - auto-cast keyword
 * Improve Language:
    - Compile time code-evaluation
    - Enums, structs, unions, switches
    - Tag-System + Static Analyis
 * Improve Editor:
    - Multiple projects
    - Code-Completion
    - Search and Replace


Metaprogramming features:
-------------------------
 * Templates (Types for Containers, Functions/Values for algorithms and interfaces)
 * Macro System (Iterators, Scope_Break, Variable_Define, Code_Insertion... lots of convenience functions)
 * Defer
 * #if (Conditional Compilation)
 * Currying
 * AST-Manipulation (Compile time Execution)
 * Generating source-code (Compile time Execution)


---------------------------
------ ISSUE TRACKER ------
---------------------------

Issues:
-------
 * Templates
    - Structs and functions in templated modules may not use templates
    - Functions created during Template-Analysis should probably be deleted later
    - Globals are currently disabled in a template context
 * Globals
    - Global initializiation order is bad (Depends on dependencies of symbol definitions)

Long-Term Goals:
----------------
 * Debugger
 * Language features (Union/Enum, match, Macros, Compile-Time Execution)
 * Editor features (Search and replace, jump to definition, show context info, refactoring, Code LOD)
 * Maybe implementing Syntax guided Editor
 * Test suite (Now works with the better error system)

More Language features to implement:
------------------------------------
 * Compile time code execution, for types and array indices and stuff
 * Enums, Switch/Match and Unions
 * Tag-System (For constant values, but also other stuff)
   ------- These features are for convenience, but they are not top priority ------
 * Any-Type and Type access (Varargs in this language, maybe use this for printf)
 * New with [] should return a pointer to a slice
 * Array bounds checking would be good
 * Macro-System
 * Iterators
 * Location-Information (Filename, line_number...)
 * Using statement
 * Context (Used for memory allocations, useful in Multi-Threading)
 * Lambdas
 * Default variable initialization (Maybe) with 0, although if the value-analyser works correctly, this should be fine
 * Array access with pointers to arrays
 * Array size should be u64, then iteration is more tedious (casting), but with iterators it should be fine
 * Automatic casting from non-pointer type to pointer in function calls
 * Literal overhaul (What is a float, what isnt...)
 * Syntax for fixed array initialization [int :: 1, 2, 3, 4, 5]
 * Loop statements, maybe loop over array syntax
 * Break/Continue overhaul (Something like: exit_loop, continue_loop, exit_switch, exit loop_iter)
 * Function return value overhaul: Multiple return values or no return value should be possible
 * Variation for simple Dynamic dispatch  (Like interfaces in OO..., similar to dynamic in Rust)

Editor features to implement:
-----------------------------
 * Code-Completion using current symbol table
 * Search and Replace
 * CTRL-R for replace word --> I would need Shift-R, since control R is already Redo
 * Visual Mode/Blockmode (Multicursor)/Visual Line
 * Multi-Window support (Multiple Tabs/Vertical or Horizontal splits, Tabs with shift-Tab)
 * Jump to definition with string search (Maybe Ctrl-F)
 * Undo/Redo Tree History
 * Command recording (@ stuff with vim, altough this could maybe be done better)
 * Tab for indentation/Ctrl-Tab for no indentation
 * Formating with = should remove unneccessary whitespaces/add them where needed, and should ignore comments.
    Actually, this should not be hard even without lexer, since we can count the parenthesis, spaces and other stuff...
 * UTF-8 Support?

Editor-Bugs:
------------
 * Alt-Gr spamming still cancels commands (win32 nonsense)
 * Undo-Redo cursor position still sucks a little (Hint: Save positions after/before command)
 * Non ASCII chars destroy some motions (Currently disabled) (Program crashes)

 Vision for the Programming Language:
 ------------------------------------
  * Compile-Time code execution
  * Static-Analysis in tandum with Tag-System
  * Code-Visualizations in Editor

Ideas that need to be tested:
-----------------------------
 * Implicit parameters in functions, some way of not having to call with all parameters?
 * Using compile-time code-execution for compiler-controll, metaprogramming and static analysis
 * Strong Code-Analysis (Analysing all possible values), with Warning System and user input
 * Tag-System (For const, but also other information, generated by user and compiler)
 * Visualizations for Code, better navigation, module system
 * Non-Destructive Code-Editing for larger modules

 * Tag for not used anymore for variables
 * Compiler supported Dynamic-Array type
 * Hot-Reloading Code
 * Stack-Analysis for Debug information (Or others? E.g. logging)
 * Differentiate break_loop, break_switch, maybe break_scope
 * Redirect debug output to application window
 * Error-Handling with the most recent build of the language

Code Improvements that should be made (When I have time):
----------------------------------------------------
Use String* for string pooling, not identifiers.
Hashing type signatures for lookup, not array search.

Differentiation between errors and Warnings


Intermediate Code should keep positional information, so should the bytecode (Will be necessary for the debugger)
Improved Parser-Error handling. (Function-Parsing Error handling should check each following line if it is a function)

At some point the editor should not render at 60 FPS, but rather update when necessary.
Asynchronous Editor-Compiler architecture, lexing/parse/analysing in background when code gets bigger




