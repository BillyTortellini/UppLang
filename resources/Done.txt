
Done:
-----
16.10:
 * Optional value/available access with ? and .!
 * Auto-lambda .=>
 * Defer with statement, e.g. defer asdf->destroy()
    Analyse statement, defer cannot return

15.10:
 * Change Function Syntax to =>, and use -> for dot calls
 * Defer_restore causes crashes fixed, missing error logging in parser

14.10:
 * Fixed bug with definition-node not being set in editor_analysis_info
 * Fix Code-completion for Dot-Calls

28.03:
 * Reworked Polymorphism/Poly-Value access, much cleaner now except implicit polymorphism/parameter access
 * Pass-Filter added prefer_base/prefer_poly
 * Hashset seems to be working
 * Fixed all testcases
 * Fix semantic analyser
 * Store poly-header in Poly-Value-Symbol / Template type
 * Always store poly-header infos in function-progress/struct-header analysis
 * Create new Symbol-Access-Level for parameters, and only use it during parameter-analysis
 * Valid Template-Type hashtable was moved inside workload, and is used in header-reanalysis
 * Poly-Value lookup uses definition workload (E.g. poly-value set)
 * Remove poly-value setting in child-workloads
 * Check workload-structure create calls

27.03:
 - Almost finished implementing new implicit Polymorphism
 - Fixed testcases at polymorphic instanciation limit
 - Fixed coloring of invalid expression-info member accesses (Initialized to sensible values)
 - Initial Syntax-Coloring based on tokens and simple rules (identifier.identifer is a member access, and so on)
 - import as usees definition symbol node
 - Fixed named argument highlighting
 - Fixed arguments not analysing in instanciation error
 - Fixed for-loop not analysing in unknown context
 - For-Loop variable should be usize by default, not u64
 - Filter symbol-table ranges with passes
 - Run Instance-Analysis even if base-analysis fails

26.03:
 * Added Pass-Filters in Editor

25.03:
 * continue and break now work without ids
 * Re-Add Bytes as struct in Upp-Language
 * Debugger shows polymorphic functions as "lambda-function?"
 * Add wait for input after running C-Program
 * Fixed Arena/Dynamic_Array bugs

24.03:
 * Fixed implicit cast bug
 * for loop variable definitions aren't highlighted
 * assert double definition bug
 * Arena Implementation
 * Fixed testcases
 * Added dot-call code completion only on dot-calls
 * Fixed member code-completion (expression-info is_valid problems...)
 * Dot-Call Syntax update



21.03:
 * Added Synchronization for compilation units-array (Not the nicest solution, but hey...)
 * Member-Access and Array-Access for Watch-values
 * Remove on breakpoints in ui-window
 * Debugger-UI added Step-Controls
 * Added Icons to UI
 * Watch-Value toggle to display single/extended
 * Current instr/upper stack instr should have coloring if they are selected, but otherwise stay the same
 * Continue/Step-Into/Step-Over should follow cursor
 * Clicking on a stack frame should take you to the position...
 * Updated Current-Line + Stack-Frames rendering (Not above breakpoints)

20.03:
 * Any-Type and string printing
 * Print Value Formating options and Memory_Source
 * Refactored Process-Memory into Memory_Source

19.03:
 * Fixed testcases compiled
 * Remove unwanted console outputs

18.03:
 * Fixed C-Compiler error with address arithmetic
 * Fixed breakpoints and multiple tabs
 * Goto Definition for Enums
 * Goto Definition for Member-Access and Dot-Call
 * Removed Pointer-Behavior for address
 * Rewriting Arena allocator with new address/usize types

17.03:
 * Editor Analysis-Info rework



14.03:
 * Fixed memory-leaks
 * size_of should return usize
 * Goto-Definition removes folds
 * Ctrl+U and Ctrl+D are not moving cursor
 * Searching with / and ? does not loop around file...
 * new with [] is not working --> Refactor with {} syntax
 * Code completion for keywords (cast_pointer, cast)

13.03:
 * Fixed all testcases with new systems
 * Reworked byte_pointer, added new types: address, isize, usize

12.03:
 * Added testcase for polymorphic overload resolution
 * Polymorphic Overload Resolution (With simple tree-matching)
 * Bug with infinite loop when adding too many folds
 * Free polymorphic overload fix (Argument-type is checked when we have 1 poly overload and one normal overload)

11.03:
 * Enum-Member auto-fill
 * Fixed more markup bugs 
 * Syntax-Highlighting for definitions
 * Fixed parameter/global syntax-coloring bug
 * Syntax-Color update (not great...)
 * Finished Arena, fixed destroy bug

10.03:
 * Allocator-functions now have const parameters, so we don't have conversion issues
 * Bug with function pointer conversion
 * Bug with parser crashes
 * Bug with in-keyword (auto-formating)
 * Fixed testcases with new /// syntax
 * Auto-formating respects strings and end-of line comments
 * Reworked Comment-System/Auto-formating/Lexing, new Block-Comment (///)



07.03:
 * Fixed synchronization bug
 * Added identifier-pool lock
 * Rewritten auto-formating with tokenizer

06.03:
 * Struct-Initializer for Slice
 * Add testcases for #get_overload
 * Add testcases for overloading (Poly overloading and dot-call overloading)
 * Fixed Parser bounding-range bug for Overload_Argument
 * Code-Completion for Hashtags #instanciate, #add_overload, #bake, #get_overload

05.03.2025
 * Fixed bugs with dot-call overloads
 * Added #get_overload
 * Overload-Resolution for dot-calls
 * Error_Checkpoint bug fix (Setting main to not runnable during overloads/error-checkpoints)
 * Overload-Resolution with polymorphic functions (Specialization should work)
 * Converting Dot-Call-Infos into Overload-Candidates
 * Storing dot-calls as lists, context-change now adds to list

04.03.2025
 * Dot calls now support polymorphic arguments
 * Fixed bug with token-range for Parse_Section::Enclosure on Arguments
 * Fixed Bug with sorting/displaying error-messages
 * Restored previous Allocator behavior

03.03.2025
 * Refactored base allocator interface (Now holds allocator data member)
 * Fixed bug where Error-Information doesn't display on hover (Semantic-error info was not set!)
 * Add toggle for cursor hover-information
 * Visual Line Selection errors when folds are enabled
 * Updated imports so we can have import Arena~Arena
 * Off by one error in syntax highlighting



28.02.2025
 * Fixed error-hover information
 * Refactored Rich-Text rendering

27.02.2025
 * Researching Memory-Allocators
 * Store Debugger-Infos in Session
 * Toggling Debugger-Window

26.02.2025:
 * Selecting Stack-Frame now influences watch-values
 * Search-Depth for Watch-Values
 * Watch-Window with values (Refactored debugger value query)
 * Breakpoint list
 * Status Debugger-Menu (Stack frames)
 * UI_System reports if mouse and keyboard are captured, so editor doesn't handle input simultaniously

25.02.2025:
 * Researched windows console position, as it's not working by setting it with MoveWindow
 * Fixed bugs with rendering
 * Refactored window into custom header

Previous:
 * Rotating Icons and Dropdown icon placement
 * All window layouts implemented
 * Dropdown size and placement
 * Dropdown style rework
 * Dropdown z-index fixed
 * Widget_Style struct + push rework

 * Anchor left window layout
 * Window resize on all sides
 * Title bar was overlapping client area fixed (Also wanted height + min height now perfect)
 * Windows now have borders
 * Z-Order update with mouse-press
 * Containers store their parent container
 * Mouse-Wheel scroll now propagates over containers

 * Reworked Drag-System (Window move, resize, scroll bar)
 * Added Mulitple Windows, window matching
 * Scroll-Bar refactor
 * Container layout refactor
 * Container padding + background color

 * Fair height distribution with multiple lists!
 * Multi-Scroll bar handling
 * Subsections
 * Bitmap writer sdf refactor
 * Triangle sdf
 * Fixed uninitialized normal-layout min-max
 * Fixed error in line height
 * Pixel perfect glyph + sdf drawing + offset
 * Added hidden elements (Matching feature)

 * Push/Pop active Container + Add 'counter' when pushing/popping container!
 * Fixed size width distribution! (Vertical layout, maybe also box-layout!)

 * Fixed Bug where drag does not work outside of window
 * Text-Clipping Indicator (...)
 * Input Filtering for Number-Input
 * Text-Input with differentiation from normal input
 * Added Check-Box widget

 * Added sdf representation of check_mark
 * Text_Input done for now
 * Cut (Keyboard shortcut CTRL-X)
 * Copy Paste (Line_Edit)
 * Text-Scrolling if cursor is out of frame...
 * Fix bug with collapsed input + y-offset (Double y-offset add)
 * Text input sending update to immediate mode user
 * Text input with single line edit
 * Added widget focus, added focus border for input
 * Moved global data from window to ui_system (Dragging)
 * Button-Input working
 * Improved Block line-merging (Now continuous)
 * Fixed Bug where hover-index at start and end frame was not correct (Rendering changed bounding box with y-offset)
 * Bug-Fixes with Mouse-Hover scroll offset and scroll offset not resetting when resizing window

Before UI-Update:
 * Line-Mergin in Blocks
 * Immediate mode rework
 * Scroll-Bar input working again
 * Width distribution Rework

 * Added Height Distribution to UI
 * Scroll-Bar implemented

 * Better growing on widgets
 * Add Hitboxes to things
 * Merge Widget-Lines if enough space
 * Collaps Widget if not enough space

 * Text-Clipping 
 * Added better way to add Vertices to Mesh (Direct Access to Mesh-Attribute_Buffer)
 * Refactored Bitmap and Glyph-Atlas (Removed Sub-Image)
 * Refactored Box-Vertex creation
 * Rectangle-Clipping inside Window
 * Render first few widgets

 * Check which padding for text is reasonable (Different for bottom/Top of text I guess in single line buttons?)
 * Create box-renderer with border colors
 * Box-Rendering around character, check fit 
    
 * Fixed Global-Variable Information in PDB (Changed traversal inside Symbols with SymTagExe)
 * Looked at PDB-Tree-Hierarchy Traversal for better understanding 
 * Cleaned-Up C compiler switches (wrong build.pdb being generated)
 * Parameter access now working
 * Fix Breakpoints (Fixed C-Translation for parameters and function names)

 * Added bandaid-solution for step-into with weird functions inbetween
 * Added some better output for stack-frames

 * Fixed C-Translation bug (If-Else and statements which include other statements...)
 * Add reference counting to address-breakpoints, as step-over may add/remove addresses

 * Added first implementation of step-over
 * Cleaned up Debugger: Correct shutdown with handles, clean stepping, clean breakpoints, correct startup-sequence handling
 * Correct shutdown for debugger
 * Implement software breakpoints
 * Merge source-debugger and debugger

 * Fix tokenization with muli-line undo
 * Fix IR-Instruction to C-Line translation on first line in function

 * IDE should focus Window when breakpoint is hit
 * Show translations in debugger (F4 while debugger is running)

 * Fixed loops after IR-Code Mapping update
 * Fixed end of file bug (AST-Range)
 * IR-Code to AST mapping
 * Refactored Debugger (New file)

 * Refactor into new file
 * Handle Chained unwind infos
 * Stack walking Epilog handling (Except for jmps instead of ret)
 * Executing Op-Codes and doing stack-walk!
 * Check if opcode-version 2 works
 * Parsing mach_frame code now doesn't use error, also version 2 is ignored, some more bug fixes...
 * Bug: Adder not shown in pdb --> undecorated names are actually not mangled names...

 * Setting breakpoints at symbols (main function)
 * Show disassembly of main function
 * Command to query symbol (location)
 * Show all assembly instructions in current function
 * All functions should have the same layout, with address, length and name + A reference to Source-Information if available.
 * Generate compiler information when loading modules/dlls, (more infos for main-code)

 * Load all symbols from all dlls
 * On break, show closest function start
 * Run process and store all necessary data from PE (Name, sections infos, pdb filename?)
 * Query all necessary information from pdb into Custom-Format before running the process
 * Line-Information from PDB
 * Read Section infos from PE (portable executable) image

 * Fixed bug with importing symbols and workload dependencies (Single line of code, last_import_workload = nullptr)
 * Fixed goto in different files
 * If comment is on line before definition, show comment in context...
 * Code-Completion on file imports (fuzzy find files)
 * Code-Completion for continue/break (Block-Ids)
 * Pressing Shift-Enter after Shift enter should just do a tab delete...
 * Normal-Binops should use expected type when both sides require context (e.g. y: u64 = 2 * x)
 * Assign-Binops (+=, -=) should deduce context for integers... (e.g. += 1 should work on all integers!)
 * Fixed release bug (operator_context_key_equals was invalid)
 * Implemented hash-table by copying hashset
 * Improved analysis-passes
 * Fix bake bug (See screenshot)
 * Fixed cam_end invalid index bug (Cam_start/end are updated on synchronize)
