#pragma once

#include "../../datastructures/string.hpp"
#include "../../datastructures/dynamic_array.hpp"
#include "../../datastructures/hashtable.hpp"
#include "../../datastructures/stack_allocator.hpp"
#include "../../datastructures/list.hpp"

#include "type_system.hpp"
#include "compiler_misc.hpp"
#include "parser.hpp"

struct Symbol;
struct Symbol_Table;
struct Compiler;
struct ModTree_Function;
struct Upp_Constant;
struct Semantic_Error;
struct Error_Information;
struct Expression_Info;
struct Analysis_Pass;

struct Workload_Definition;
struct Workload_Base;
struct Workload_Import_Resolve;

struct Function_Progress;
struct Bake_Progress;
struct Module_Progress;
struct Type_Polymorphic;

namespace Parser
{
    enum class Section;
}

namespace AST
{
    struct Node;
    struct Code_Block;
    struct Path_Lookup;
    struct Expression;
}



// Modtree TODO: Rename this into something more sensible, like Upp-Function
struct ModTree_Function
{
    Type_Function* signature;
    Symbol* symbol; // May be 0 (e.g. anonymous functions, bake)
    Symbol_Table* parameter_table; 
    Workload_Base* code_workload; // Workload that generated the semantic info required for code-gen (Either Function-body or Bake-Analysis)
    Function_Progress* progress; // May be null if the function was generated by a Bake

    // Infos
    bool contains_errors; // NOTE: contains_errors (No errors in this function) != is_runnable (This + all called functions are runnable)
    bool is_runnable;
    Dynamic_Array<ModTree_Function*> called_from;
    Dynamic_Array<ModTree_Function*> calls;
};

struct ModTree_Global
{
    Type_Base* type;
    int index;

    bool has_initial_value;
    AST::Expression* init_expr;
    Workload_Definition* definition_workload; // For code generation
};

struct ModTree_Program
{
    Dynamic_Array<ModTree_Function*> functions;
    Dynamic_Array<ModTree_Global*> globals;
    ModTree_Function* main_function;
};



// WORKLOADS
enum class Analysis_Workload_Type
{
    EVENT, // Empty workload, which can have dependencies and dependents

    MODULE_ANALYSIS, // This is basically just symbol discovery
    IMPORT_RESOLVE,   // 

    FUNCTION_HEADER,
    FUNCTION_PARAMETER,
    FUNCTION_BODY,
    FUNCTION_CLUSTER_COMPILE,

    STRUCT_ANALYSIS,

    BAKE_ANALYSIS,
    BAKE_EXECUTION,

    DEFINITION,
};

struct Workload_Base
{
    Analysis_Workload_Type type;
    bool is_finished;
    bool was_started;
    Fiber_Pool_Handle fiber_handle;
    Symbol_Table* parent_table; // Active table at time of workload creation

    // Information required to be consistent during workload switches
    // Note: These members are automatically set in functions like analyse_expression, analyse_statement...
    //       Also note that some of these may not be set depending on the workload type
    ModTree_Function* current_function;
    Expression_Info* current_expression;
    bool statement_reachable;
    Symbol_Table* current_symbol_table;
    Analysis_Pass* current_pass;
    Dynamic_Array<AST::Code_Block*> block_stack; // NOTE: This is here because it is required by Bake-Analysis and code-block, also for statement blocks...

    // Note: This is a non-owning array, required for re-analysing the header during poly-instanciation
    //       When encountering a polymorphic parameter, and this is not set, then we can assume that we are in base analysis
    //       If a value is set, we can assue we are either in instanciation stage or in the instance function analysis
    Array<Upp_Constant> polymorphic_values; 
    Array<Type_Base*> implicit_polymorphic_types;

    // Dependencies
    List<Workload_Base*> dependencies;
    List<Workload_Base*> dependents;

    // Note: Clustering is required for Workloads where cyclic dependencies on the same workload-type are allowed,
    //       like recursive functions or structs containing pointers to themselves
    Workload_Base* cluster;
    Dynamic_Array<Workload_Base*> reachable_clusters;
};

struct Workload_Event
{
    Workload_Base base;
    const char* description;
};

struct Workload_Module_Analysis
{
    Workload_Base base;
    Module_Progress* progress;
    AST::Module* module_node;
    Symbol_Table* symbol_table;
    Workload_Import_Resolve* last_import_workload;
    Workload_Module_Analysis* parent_analysis;
};

struct Workload_Import_Resolve
{
    Workload_Base base;
    AST::Import* import_node;
    Symbol* symbol; // May be 0 if its an import
    Symbol* alias_for_symbol; // May be 0 if its an import
};

struct Workload_Function_Header;
struct Workload_Function_Parameter
{
    Workload_Base base;
    Function_Progress* progress;
    AST::Parameter* node;
    int parameter_index;
    Function_Parameter* parameter;
};

struct Workload_Function_Header
{
    Workload_Base base;
    Function_Progress* progress;
    AST::Expression* function_node;
    Dynamic_Array<Workload_Function_Parameter*> parameter_order;
};

struct Workload_Function_Body
{
    Workload_Base base;
    Function_Progress* progress;
    AST::Code_Block* body_node;
};

struct Workload_Function_Cluster_Compile
{
    Workload_Base base;
    Function_Progress* progress;
    Dynamic_Array<ModTree_Function*> functions;
};

struct Workload_Structure
{
    Workload_Base base;

    Type_Struct* struct_type;
    Dynamic_Array<Type_Array*> arrays_depending_on_struct_size;
    AST::Expression* struct_node;
};

struct Workload_Definition
{
    Workload_Base base;
    Symbol* symbol;
    bool is_comptime;
    AST::Expression* value_node;
    AST::Expression* type_node;
};

struct Workload_Bake_Analysis
{
    Workload_Base base;
    Bake_Progress* progress;
    AST::Expression* bake_node;
};

struct Workload_Bake_Execution
{
    Workload_Base base;
    Bake_Progress* progress;
    AST::Expression* bake_node;
};



// ANALYSIS_PROGRESS

// Polymorphism
enum class Function_Progress_Type
{
    NORMAL, //
    POLYMORPHIC_BASE,
    POLYMORPHIC_INSTANCE
};

struct Function_Progress
{
    ModTree_Function* function;

    Workload_Function_Header* header_workload; // Points to base header workload if it's an instance
    Workload_Function_Body* body_workload;
    Workload_Function_Cluster_Compile* compile_workload;

    Function_Progress_Type type;
    union {
        struct {
            Dynamic_Array<Function_Progress*> instances;  // Required for de-duplication
            Dynamic_Array<Type_Polymorphic*> implicit_parameters;
            Dynamic_Array<int> polymorphic_parameter_indices; // Indices of comptime (explicit polymorphic) parameters in signature
            Dynamic_Array<int> comptime_argument_evaluation_order; // Argument evaluation order for instanciation (Contains indices to parameters)
        } polymorphic_base;
        struct 
        {
            Function_Progress* polymorphic_base;
            Array<Upp_Constant> parameter_values;
            Array<Type_Base*> implicit_parameter_values; 
            int instanciation_depth;
        } polymorhic_instance;
    };
};

struct Bake_Progress
{
    ModTree_Function* bake_function;
    Optional<Upp_Constant> result;

    Workload_Bake_Analysis* analysis_workload;
    Workload_Bake_Execution* execute_workload;
};

struct Module_Progress
{
    Workload_Module_Analysis* module_analysis;
    Workload_Event* event_symbol_table_ready; // After all using workloads have ended
    Symbol* symbol; // May be 0 if root
};




// WORKLOAD EXECUTER
struct Workload_Pair
{
    Workload_Base* workload;
    Workload_Base* depends_on;
};

struct Dependency_Failure_Info
{
    bool* fail_indicator;
    AST::Symbol_Lookup* error_report_node;
};

struct Dependency_Information
{
    List_Node<Workload_Base*>* dependency_node;
    List_Node<Workload_Base*>* dependent_node;
    // Information for cyclic resolve
    bool can_be_broken;
    Dynamic_Array<Dependency_Failure_Info> fail_indicators;
};

struct Workload_Executer
{
    Dynamic_Array<Workload_Base*> all_workloads;
    Dynamic_Array<Workload_Base*> runnable_workloads;
    Dynamic_Array<Workload_Base*> finished_workloads;
    bool progress_was_made;

    Hashtable<Workload_Pair, Dependency_Information> workload_dependencies;
};

void workload_executer_resolve();
Module_Progress* workload_executer_add_module_discovery(AST::Module* module, bool is_root_module);



// Analysis Information
enum class Info_Cast_Type
{
    INTEGERS, // Implicit to bigger
    FLOATS, // Implicit to bigger
    FLOAT_TO_INT,
    INT_TO_FLOAT, // Implicit
    POINTERS, // Implicit from/to void*
    POINTER_TO_U64,
    U64_TO_POINTER,
    ENUM_TO_INT,
    INT_TO_ENUM,
    ARRAY_TO_SLICE, // Implicit
    TO_ANY,
    FROM_ANY,

    NO_CAST, // No cast required
    INVALID, // No cast can create the desired result, but we still handle it as a cast
};

enum class Expression_Context_Type
{
    UNKNOWN,                // Type is not known
    AUTO_DEREFERENCE,       // Type is not known, but we want pointer level 0, e.g. a value 
    SPECIFIC_TYPE_EXPECTED, // Type is known, pointer level items + implicit casting enabled
    NO_VALUE                // We expect no value, as it is immediately dropped (Expression statement)
};

struct Expression_Context
{
    Expression_Context_Type type;
    bool unknown_due_to_error; // If true the context is unknown because an error occured, otherwise there is no info
    Type_Base* signature;
};

enum class Expression_Result_Type
{
    VALUE,
    TYPE,
    FUNCTION,
    HARDCODED_FUNCTION,
    POLYMORPHIC_FUNCTION,
    CONSTANT,
    NOTHING, // Functions returning void
};

struct Argument_Info
{
    int argument_index; // For named arguments/parameters this gives the according parameter index
    bool is_polymorphic; // If polymorphic, the argument shouldn't generate code during code-generation
    bool already_analysed; // During analysis, don't reanalyse arguments that were already analyse
    bool context_application_missing; // If already analyse, we may still need to apply the context
};

struct Expression_Post_Op
{
    int deref_count;
    bool take_address_of;
    Info_Cast_Type implicit_cast;
    Type_Base* type_afterwards;
};

struct Expression_Info
{
    // All types in "options" union are before the expression context has been applied
    Expression_Result_Type result_type;
    union
    {
        Type_Base* value_type;
        Type_Base* type;
        ModTree_Function* function;
        Function_Progress* polymorphic_function; // Either base or if the function was instanciated an instance progress
        Hardcoded_Type hardcoded;
        Symbol_Table* module_table;
        Upp_Constant constant;
    } options;

    bool contains_errors; // If this expression contains any errors (Not recursive), currently only used for comptime-calculation
    union {
        Info_Cast_Type explicit_cast; // Note: Cast-Expression results may be further implicitly casted and because of this expression_info can hold 2 cast types
        Type_Function* function_call_signature; // Used by code-generation for accessing default values
        Function_Parameter* implicit_parameter;
    } specifics;

    Expression_Context context; // Maybe I don't even want to store the context
    Expression_Post_Op post_op;
};

enum class Control_Flow
{
    SEQUENTIAL, // One sequential path exists, but there may be paths that aren't sequential
    STOPS,      // Execution never goes further than the given statement, but there may be paths that return
    RETURNS,    // All possible code path return
};

struct Statement_Info
{
    Control_Flow flow;
    struct {
        AST::Code_Block* block; // Continue/break
        bool is_struct_split; // Definition or assignment
    } specifics;
};

struct Code_Block_Info
{
    Symbol_Table* symbol_table;
    Control_Flow flow;
    bool control_flow_locked;
};

struct Case_Info
{
    int is_valid;
    int case_value; // Currently we only switch over enums/ints
};

struct Parameter_Info {
    Symbol* symbol;
};

struct Definition_Symbol_Info {
    Symbol* symbol;
};

struct Symbol_Lookup_Info {
    Symbol* symbol; // Resolved symbol
};

struct Path_Lookup_Info {
    Symbol* symbol; // Resolved symbol
};

struct Module_Info {
    Symbol_Table* symbol_table;
};

union Analysis_Info
{
    Expression_Info info_expr;
    Statement_Info info_stat;
    Code_Block_Info info_block;
    Case_Info info_case;
    Argument_Info arg_info;
    Parameter_Info param_info;
    Definition_Symbol_Info definition_symbol_info;
    Symbol_Lookup_Info symbol_lookup_info;
    Path_Lookup_Info path_info;
    Module_Info module_info;
};

enum class Info_Query
{
    CREATE,
    READ_NOT_NULL,  // Value must be there, otherwise panic
    TRY_READ,       // May return 0
    CREATE_IF_NULL, // Always returns info (Creates one if not existing)
};

Expression_Info* pass_get_node_info(Analysis_Pass* pass, AST::Expression* node, Info_Query query);
Case_Info* pass_get_node_info(Analysis_Pass* pass, AST::Switch_Case* node, Info_Query query);
Argument_Info* pass_get_node_info(Analysis_Pass* pass, AST::Argument* node, Info_Query query);
Statement_Info* pass_get_node_info(Analysis_Pass* pass, AST::Statement* node, Info_Query query);
Code_Block_Info* pass_get_node_info(Analysis_Pass* pass, AST::Code_Block* node, Info_Query query);
Symbol_Lookup_Info* pass_get_node_info(Analysis_Pass* pass, AST::Symbol_Lookup* node, Info_Query query);
Definition_Symbol_Info* pass_get_node_info(Analysis_Pass* pass, AST::Definition_Symbol* node, Info_Query query);
Parameter_Info* pass_get_node_info(Analysis_Pass* pass, AST::Parameter* node, Info_Query query);
Path_Lookup_Info* pass_get_node_info(Analysis_Pass* pass, AST::Path_Lookup* node, Info_Query query);
Module_Info* pass_get_node_info(Analysis_Pass* pass, AST::Module* node, Info_Query query);

Type_Base* expression_info_get_type(Expression_Info* info, bool before_context_is_applied);



// HELPERS
struct Predefined_Symbols
{
    // Symbols for primitive types
    Symbol* type_bool;
    Symbol* type_int;
    Symbol* type_float;
    Symbol* type_u8;
    Symbol* type_u16;
    Symbol* type_u32;
    Symbol* type_u64;
    Symbol* type_i8;
    Symbol* type_i16;
    Symbol* type_i32;
    Symbol* type_i64;
    Symbol* type_f32;
    Symbol* type_f64;
    Symbol* type_byte;
    Symbol* type_void;

    // Symbols for 'compiler' provided structs
    Symbol* type_string;
    Symbol* type_type;
    Symbol* type_type_information;
    Symbol* type_any;
    Symbol* type_empty;

    // Symbols for hardcoded types
    Symbol* hardcoded_type_info;
    Symbol* hardcoded_type_of;
    Symbol* hardcoded_assert;
    Symbol* hardcoded_print_bool;
    Symbol* hardcoded_print_i32;
    Symbol* hardcoded_print_f32;
    Symbol* hardcoded_print_string;
    Symbol* hardcoded_print_line;
    Symbol* hardcoded_read_i32;
    Symbol* hardcoded_read_f32;
    Symbol* hardcoded_read_bool;
    Symbol* hardcoded_random_i32;

    // Error-Symbol (Used when Symbol-Reads cannot be resolved, e.g. symbol not defined)
    Symbol* error_symbol;
};

// I currently need this so that a workload can analyse the same node multiple times
struct Analysis_Pass 
{
    Workload_Base* origin_workload;
};

struct AST_Info_Key
{
    Analysis_Pass* pass;
    AST::Node* base;
};

struct Node_Passes
{
    Dynamic_Array<Analysis_Pass*> passes;
    AST::Node* base;
};


// ERRORS
enum class Error_Information_Type
{
    ARGUMENT_COUNT,
    MISSING_PARAMETER,
    INVALID_MEMBER,
    ID,
    SYMBOL,
    EXIT_CODE,

    GIVEN_TYPE,
    EXPECTED_TYPE,
    FUNCTION_TYPE,
    BINARY_OP_TYPES,
    CYCLE_WORKLOAD,

    EXPRESSION_RESULT_TYPE,
    CONSTANT_STATUS,
    COMPTIME_MESSAGE,
};

struct Error_Information
{
    Error_Information_Type type;
    union
    {
        Function_Parameter parameter;
        struct {
            int expected;
            int given;
        } invalid_argument_count;
        String* id;
        Symbol* symbol;
        Exit_Code exit_code;
        Type_Base* type;
        Type_Function* function;
        struct {
            Type_Struct* struct_signature;
            String* member_id;
        } invalid_member;
        Workload_Base* cycle_workload;
        struct {
            Type_Base* left_type;
            Type_Base* right_type;
        } binary_op_types;
        Expression_Result_Type expression_type;
        const char* constant_message;
        const char* comptime_message;
    } options;
};

struct Semantic_Error
{
    const char* msg;
    AST::Node* error_node; // May be null
    Parser::Section section;
    Dynamic_Array<Error_Information> information;
};

void log_semantic_error(const char* msg, AST::Node* node, Parser::Section node_section = Parser::Section::WHOLE);
void semantic_analyser_set_error_flag(bool error_due_to_unknown);
void semantic_error_append_to_string(Semantic_Error e, String* string);





// ANALYSER
struct Semantic_Analyser
{
    // Result
    Dynamic_Array<Semantic_Error> errors;
    ModTree_Program* program;
    Hashtable<AST::Node*, Node_Passes> ast_to_pass_mapping;
    Hashtable<AST_Info_Key, Analysis_Info*> ast_to_info_mapping;

    // Other
    Workload_Base* current_workload;
    Module_Progress* root_module;
    ModTree_Global* global_type_informations;
    Predefined_Symbols predefined_symbols;
    Workload_Executer* workload_executer;
    Hashtable<AST::Expression*, Type_Polymorphic*> implicit_parameter_node_mapping;

    // Symbol tables
    Symbol_Table* root_symbol_table;
    Hashset<Symbol_Table*> symbol_lookup_visited;

    // Allocations
    Stack_Allocator comptime_value_allocator;
    Dynamic_Array<Symbol_Table*> allocated_symbol_tables;
    Dynamic_Array<Symbol*> allocated_symbols;
    Dynamic_Array<Analysis_Pass*> allocated_passes;
    Dynamic_Array<Function_Progress*> allocated_function_progresses;
    Stack_Allocator progress_allocator;
};

Semantic_Analyser* semantic_analyser_initialize();
void semantic_analyser_destroy();
void semantic_analyser_reset();
void semantic_analyser_finish();

Type_Function* hardcoded_type_to_signature(Hardcoded_Type type);



