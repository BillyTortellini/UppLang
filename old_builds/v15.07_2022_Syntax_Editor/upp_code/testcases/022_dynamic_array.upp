module Dynamic_Array<T>
{
    Dynamic_Array :: struct
    {
        buffer: []T;
        size: i32;
    }
    
    create_empty :: (initial_capacity: int) -> Dynamic_Array<T>
    {
        result: Dynamic_Array<T>;
        result.buffer = new [initial_capacity]T;
        result.size = 0;
        return result;
    }
    
    destroy :: (array: *Dynamic_Array<T>) 
    {
        delete array.buffer;
        //array.buffer.data = null;
        //array.buffer.size = 0;
        //array.size = 0;
    }
    
    array_copy :: (destination: []T, source: []T, count: int) 
    {
        i := 0;
        while i < count {
            destination[i] = source[i];
            i = i + 1;
        }
    }
    
    reserve :: (array: *Dynamic_Array<T>, required: i32) 
    {
        if array.buffer.size < required 
        {
            new_capacity := array.buffer.size;
            while new_capacity < required {
                new_capacity = new_capacity * 2;
            }
            new_buffer := new [new_capacity]T;
            array_copy<T>(new_buffer, array.buffer, array.buffer.size);
            delete array.buffer;
            array.buffer = new_buffer;
        }
    }
    
    push_back :: (array: *Dynamic_Array<T>, value: T) 
    {
        array.size = array.size + 1;
        reserve<T>(array, array.size);
        array.buffer[array.size-1] = value;
    }
    
    for_each :: (array: *Dynamic_Array<T>, fn: (item: *T) -> void)
    {
        i := 0;
        while i < array.size
        {
            fn(*array.buffer[i]);
            i = i+1;
        }
    }
}

Player :: struct
{
    name: String;
    lvl: int;
    alive: bool;
}

player_make :: (name: String, lvl: int, alive: bool) -> Player 
{
    result: Player;
    result.name = name;
    result.lvl = lvl;
    result.alive = alive;
    return result;
}

player_print :: (player: *Player) 
{
    print_string(player.name);
    print_string(" ");
    print_i32(player.lvl);
    print_string(" ");
    print_bool(player.alive);
    print_line();
}

count := 0;

count_player_lvl :: (player: *Player) {
    count = count + player.lvl;
}

main :: ()
{
    p1 := player_make("Mark", 1, true);
    p2 := player_make("Peter", 2, false);
    p3 := player_make("Derek", 3, true);
    p4 := player_make("France", 4, false);
    p5 := player_make("Adolf", 5, false);
    
    i := 0;
    while i < 10
    {
        defer i = i + 1;
        players := Dynamic_Array<Player>~create_empty(4);
        defer Dynamic_Array<Player>~destroy(*players);
        
        Dynamic_Array<Player>~push_back(*players, p1);
        Dynamic_Array<Player>~push_back(*players, p2);
        Dynamic_Array<Player>~push_back(*players, p3);
        Dynamic_Array<Player>~push_back(*players, p4);
        Dynamic_Array<Player>~push_back(*players, p5);
    
        count = 0;
        Dynamic_Array<Player>~for_each(*players, count_player_lvl);
        assert(count == 15);
    }
}