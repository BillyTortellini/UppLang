Player::struct
	age:int
	name:String
	alive:bool

main::()
	// To conclude why the Type-Type is quite powerfull, lets look at the type_information type
	info:Type_Information
	
	// To obtain information about any type, we can use the built-in type_info() function
	info=type_info(int)
	
	//
		Type info contains all informations about a type, for example:
		- size
		- alignment
		- struct members, with offsets and names
		- enum members, with string names
		- primitive type
		- ...
	int_size:=info.size
	int_alignment:=info.alignment
	
	assert(int_size==4)
	assert(int_alignment==4)
	assert(info.type==int)
	
	// To give an example of what could be done, lets search for a member and get its offset
	name_offset:=member_offset(Player,"name")
	assert(name_offset==8)
	
	// With bake, this is a zero-cost operation
	offset:=#bake member_offset(Player,"alive")
	assert(offset==32)
	//
		This still seems kinda inconvenient compared to C's 'offset_of'
		But in the future you will be able to get almost the same syntax with
		Macros. There will also be the possiblility to report errors inside
		bake, which will prevent the names from being invalid

member_offset::(type:Type,name:String)->int
	offset:=-1
	info:=type_info(type)
	if info.options.tag!=.structure
		return offset
	
	members:=info.options.structure.members
	i:=0
	while i<members.size search_loop:
		if string_compare(members[i].name,name)
			offset=members[i].offset
			break search_loop
		i=i+1
	return offset

string_compare::(str1:*String,str2:*String)->bool
	if str1.size!=str2.size
		return false
	i:=0
	while i<str1.size
		if str1.character_buffer[i]!=str2.character_buffer[i]
			return false
		i=i+1
	return true
