main :: ()
{
    /* 
    Pointers in Upp are similar to C Pointer, with some differences in Syntax.
    When declaring a pointer type, the * is before the type:
    C:   int* x;
    Upp: x: *int;
   
    The same is true for arrays
    C:   int x[5]
    Upp: x: [5]int
    
    Combinations are also possible, which cannot be done in C since array syntax is after ID
    C:   int* x[5]; // Array of 5 int*
    Upp: x: [5]*[3]*int; // Array 5 of Pointer to Array 3 of int pointer
    
    The unary Address-Of and Dereference operators (&, *) are also present, but they are swapped compared to C 
    Upp:  x: *int = *i;
          &x = 5;
    C:    int* x = &i;
          *x = 5;
    */
    a: int= 15;
    ap: *int = *a;
    app: **int = *ap;
    appp: ***int = *app;
    
    assert(&&&appp == 15);
    
    /*
    One huge difference to C is that pointers are always dereferenced in expressions.
    */
    {
        i := 5;
        x: *int = *i;
        sum := x + i;
        assert(sum == 10);
    }
    
    /*
    This is made possible because all C-Operations on pointers are removed. These are:
    1. Casting between integers and pointers (int* x = (int*)15)
    2. Array access on pointers (int* x = &i; int elem = x[2];)
    3. Pointer arithmetic (+, -)
    4. Pointer comparisons (==, !=, <, >, <=, >=)
    
    To still offer the same functionality, there are new operators which replace the previously mentioned:
    - New pointer comparison syntax (*==, *!=)
    - New syntax for casting pointers to integers (cast_raw, cast_ptr)
    - Pointer arithmetic is done only with integer values
    */
    {
        i := 5;
        j := 5;
        ip := *i;
        jp := *j;
        // Value comparison
        assert(i == j);
        // Value comparison with pointers
        assert(ip == jp);
        // Pointer comparison
        assert(!(ip *== jp));
        assert(ip *!= jp);
    }
    // Pointer to raw casting
    {
        array := int.[1, 2, 3];
        raw: u64 = cast_raw array.data;
        second := cast_ptr(*int)(raw + cast(u64) 4);
        assert(second == 2);
    }
}