
vec2::struct
	x:int
	y:int

add::(a:vec2,b:vec2)=>vec2
	return.{a.x+b.x,a.y+b.y}

add_ptr::(a:*vec2,b:*vec2)=>*vec2
	a.x+=b.x
	a.y+=b.y
	return a

add_weird::(a:*int,b:bool)=>vec2
	val:=&a
	if b
		val+=1
	return.{val,val}

main::()
	
	// Normal binops
		context add_binop("+",add)
		a:=vec2.{1,3}
		b:=vec2.{10,0}
		c:=a+b
		assert(c.x==11&&c.y==3)
	
	// Binops also work with auto-address of + auto dereference
		a:=vec2.{1,3}
		b:=vec2.{5,5}
		
		ap:=*a
		app:=*ap
		
		context add_binop("*",add_ptr)
		
		c:=app*b
		assert(c.x==6&&c.y==8)
	
	// Binops don't have to be symmetric
		context add_binop("+",add_weird,commutative=true)
		i:=7
		x:=i+true
		y:=false+i
		
		assert(x.x==8&&x.y==8)
		assert(y.x==7&&y.y==7)
