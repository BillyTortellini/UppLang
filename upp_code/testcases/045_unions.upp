/*
The problem with C unions is that they are quite unsafe
because we do not know which union is currently active.
    
To address this problem, one could add a value that indicates
what value is active at a given time, like this:
*/

C_Style :: module
{
    C_Address_Tag :: enum 
    {
        IPV4;
        IPV5;
        IPV6;
    }
    
    C_Address :: c_union
    {
        ipv4: [4]byte;
        ipv5: bool;
        ipv6: String;
        tag: C_Address_Tag;
    }
}

/*
This is the same way as unions in this language work,
but in this language the tag enum is automatically created.

This may not seem very significant, because it just removes
some typing and adding a member, but it has some very good implications:
1. It signals the intent of the programmer more clearly
2. The tag stays always in sync with the union members
3. Probably the most important: The compiler now knows what the tag is supposed to represent
4. Because the use of the tag value is clear, metaprogramming can now automatically create print or serialize procedures
*/

Address :: union
{
    ipv4: [4]byte;
    ipv5: bool;
    ipv6: String;
}

// The tag is just a normal enum, and can be used inside an if
address_version_if :: (addr: Address) -> int
{
    if addr.tag == .ipv4 {
        return 4;
    }
    else if addr.tag == Address.ipv5 {
        return 5;
    }
    else if addr.tag == Address.ipv6 {
        return 6;
    }
    return 0;
}

// Logically we can switch over the tag, but we can also switch over the union, which does the same
address_version_switch :: (addr: Address) -> int
{
    switch addr
    {
        case .ipv4: return 4;
        case .ipv5: return 5;
        case .ipv6: return 6;
    }
}

main :: ()
{
    {
        // The tag is now just an enum member, and can be accessed like other members
        addr_v4: Address;
        addr_v4.tag = Address.ipv4;
        addr_v4.ipv4 = byte.[cast 0, cast 0, cast 0, cast 0];
    
        addr_v5: Address;
        addr_v5.tag = Address.ipv5;
        addr_v5.ipv5 = false;
    
        addr_v6: Address;
        addr_v6.tag = Address.ipv6;
        addr_v6.ipv6 = "COFFEF";
    
        assert(address_version_if(addr_v4) == 4);
        assert(address_version_if(addr_v5) == 5);
        assert(address_version_if(addr_v6) == 6);
    }
    
    // Struct initialization syntax also works with unions, but only one member can be specified
    {
        addr_v4 := Address.{ipv4 = byte.[cast 1, cast 1, cast 1, cast 1]};
        addr_v5 := Address.{ipv5 = false};
        addr_v6 := Address.{ipv6 = "COFFEF"};
        
        // Union initializer automatically set the correct tag
        assert(addr_v4.tag == .ipv4);
        assert(addr_v5.tag == .ipv5);
        assert(addr_v6.tag == .ipv6);
        
        assert(address_version_switch(addr_v4) == 4);
        assert(address_version_switch(addr_v5) == 5);
        assert(address_version_switch(addr_v6) == 6);
    }
}
