
main :: ()
	// New and delete actually only call the allocation function of the
	// currently set allocator (Implemented as a global for now)
	// The difference to calling the function directly is that
	// new and delete expect the allocation to succeed (Otherwise panic),
	// and that the type is already corrected (We get a type pointer instead of address)
	
	alloc :=* Upp~global_allocator
	ptr := alloc.allocate_fn(alloc, 100, 4)
	assert(ptr != null)
	
	ip: *int =* cast_pointer ptr
	ip = 10
	ip += 5
	assert(ip == 15)
	
	alloc.free_fn(alloc, ptr, 100)
	
	
	// Since the allocator is a global constant, it is possible to 
	// create and set other allocators
	
	STACK_SIZE :: 256
	import Upp~address
	import Upp~Allocator
	import Upp~usize
	import Upp~u32
	import Upp~u8
	Stack_Allocator :: struct
		base: Allocator
		memory: [STACK_SIZE]u8
		stack_index: int
		alloc_count: int
	
	custom_alloc :: (allocator_base: *Allocator, size: usize, alignment: u32) -> address
		alloc :=* cast_pointer {*Stack_Allocator} allocator_base
		if alloc.stack_index + cast size >= STACK_SIZE
			return cast_pointer null
		
		alloc.alloc_count += 1
		ptr: address = cast_pointer *alloc.memory[alloc.stack_index]
		alloc.stack_index += cast {int} size
		return ptr
	
	custom_dealloc :: (data: *Allocator, pointer: address, size: usize)
		alloc :=* cast_pointer {*Stack_Allocator} data
		alloc.alloc_count -= 1
	
	custom_realloc :: (allocator: *Allocator, ptr: address, prev: usize, next: usize) -> bool
		return false
	
	stack_alloc := Stack_Allocator.{
		.{custom_alloc, custom_dealloc, custom_realloc}
		stack_index = 0
		alloc_count = 0
		_
	}
	
	Upp~global_allocator =* stack_alloc.base
	
	values := new{5} int
	assert(stack_alloc.alloc_count == 1)
	x :=* new int
	assert(stack_alloc.alloc_count == 2)
	
	x = 10
	for a, i in values
		a = cast i
	assert(x == 10)
	
	delete x
	assert(stack_alloc.alloc_count == 1)
	delete values
	assert(stack_alloc.alloc_count == 0)
