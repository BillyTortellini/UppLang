
import Upp~i32
import Upp~u8
import Upp~type_info

RGBA :: union
	value: i32
	raw: [4]u8

main :: ()
	// Also this should really never work in a release build, as this is
	// undefined behavior (memcpy should work)
	
	// Unions work the same as in C, e.g. the members occupy the same space in memory.
	rgba: RGBA
	rgba.raw[0] = 1
	rgba.raw[1] = 1
	rgba.raw[2] = 1
	rgba.raw[3] = 1
	assert(rgba.raw[0] == 1 && rgba.raw[1] == 1 && rgba.raw[2] == 1 && rgba.raw[3] == 1)
	
	// When writing to value, this
	// also writes to raw, as they occupy the same memory
	rgba.value = 0
	assert(rgba.raw[0] == 0 && rgba.raw[1] == 0 && rgba.raw[2] == 0 && rgba.raw[3] == 0)
	
	// The size of the type is also only 4 bytes,
	// which confirmes that the members must overlap
	info := type_info(RGBA)
	assert(info.size == 4)
