
import Upp~print_string
import Upp~print_bool
import Upp~print_line
import Upp~print_i32
import Upp~c_string

// Subtypes can form a hierarchy
Node :: struct
	Expression:
		Binop:
			a: int
			b: int
		Unop:
			a: int
	Statement:
		Assignment:
			left: int
			right: int
		For:
			condition: bool
			value: int

node_test :: (a: * const Node) => int
	return 0

stat_test :: (a: Node.Statement) => int
	if a.tag == .For
		loop :=* a.For
		if loop.condition
			return loop.value
		return 0
	else
		ass :=* a.Assignment
		return ass.left + ass.right

assign_test :: (a: Node.Statement.Assignment) => int
	return a.left + a.right

main :: ()
	node: Node
	node.tag = .Statement
	node.Statement.tag = .Assignment
	node.Statement.Assignment.right = 5
	node.Statement.Assignment.left = 4
	
	stat :=* node.Statement
	assign :=* stat.Assignment
	
	node_test(node)
	node_test(stat)
	node_test(assign)
	
	stat_test(stat)
	stat_test(assign)
	stat_test(node.Statement)
	
	assign_test(assign)
	assign_test(stat.Assignment)
	assign_test(node.Statement.Assignment)
