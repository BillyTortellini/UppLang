
import Upp~c_string

Address :: struct
	IPv4:
		bytes: [4]Upp~byte
	IPv6:
		bytes: [8]Upp~byte
		is_local: bool
	House:
		zip_code: int
		street: c_string

test :: (a: Address) -> int
	switch a
		.House -> house
			return house.zip_code * 2
		.IPv4 -> v4
			sum := 0
			for i in v4.bytes
				sum = sum + cast i
			return sum
		.IPv6 -> v6
			if v6.is_local
				return 10
			return 1
	
	return -1

main :: ()
	p1 := Address.House.{10, "Frank-street"}
	p2 := Address.IPv6.{.[0, 8, 8, 8, 8, 8, 8, 7], true}
	p3 := Address.IPv4.{.[127, 0, 0, 1]}
	
	assert(test(p1) == 20)
	assert(test(p2) == 10)
	assert(test(p3) == 128)
