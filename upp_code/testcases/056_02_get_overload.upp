
add :: (a: int, b: int) -> int
	return a + b

add :: (a: float, b: float) -> float
	return a + b

add :: (a: $T, b: T) -> T
	return a + b

Node :: struct
	value: int

add :: (node: *Node, a: int)
	node.value += a

add :: (node: *Node, b: bool)
	if b
		node.value *= 2

add :: (node: *Node, a: int, b: int) -> int
	node.value = node.value * a + b
	return node.value

main :: ()
	// Using the #get_overload operator, we can get distinguised values of overloads
	import Upp~type_of
	
	val64: Upp~u64 = 5
	node := Node.{0}
	
	a := ( #get_overload add(a = const int, b = const int))(5, 10)
	assert(type_of(a) == int)
	( #get_overload add(node, a))(node, 5)
	assert(node.value == 5)
	( #get_overload add(node, b))(node, true)
	assert(node.value == 10)
	
	val64 = #get_overload_poly add()(val64, val64)
	assert(val64 == 10)
