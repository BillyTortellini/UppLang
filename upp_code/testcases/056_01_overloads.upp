
add :: (a: int, b: int) => int
	return a + b

add :: (a: float, b: float) => float
	return a + b

add :: (a: $T, b: T) => T
	return a + b

Node :: struct
	value: int

add :: (node: *Node, a: int)
	node.value += a

add :: (node: *Node, b: bool)
	if b
		node.value *= 2

add :: (node: *Node, a: int, b: int) => int
	node.value = node.value * a + b
	return node.value

main :: ()
	import Upp~type_of
	
	a := add(5, 10)
	assert(type_of(a) == int)
	f := add(5.5, 10)
	assert(type_of(f) == float)
	
	x: Upp~u64 = 5
	z := add(x, x)
	assert(type_of(z) == Upp~u64)
	
	n: Node = .{20}
	add(n, 5)
	add(n, true)
	add(n, 2, 5)
	assert(n.value == 105)
