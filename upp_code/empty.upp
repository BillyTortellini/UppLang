
is_even :: (a: int) => bool
	return a % 2 == 0

context add_cast(is_even, .INFERRED)

A :: module
	context set_cast_option(.INTEGER_SIZE_DOWNCAST, .IMPLICIT)

context import A

main :: ()
	i: int = 256
	small: i8 = i
	
	print_i32(i)
	if cast i
		print_string(" is even")
	else
		print_string(" is odd")
	
	print_line()
	print_i32( cast small)


import Upp~*
import Upp~Type_Handle as Type

Comparable :: struct (T: Type)
	equals: (a: T, b: T) => bool

int_equals :: (a: int, b: int) => bool
	return a == b

Holder :: struct (C: Comparable($T))
	value: T

holder_compare :: (h: *Holder(Comparable($T)), value: T) => bool
	return h.C.equals(h.value, value)

main :: ()
	
	INT_COMPARE :: Comparable(int).{int_equals}
	
	holder: Holder(INT_COMPARE)
	holder.value = 10
	
	b := holder_compare(holder, 10)
	Upp~print_bool(b)
	



