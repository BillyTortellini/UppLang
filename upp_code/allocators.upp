
import Upp~Allocator
import Upp~usize
import Upp~u32
import Upp~address

// Provides dot_calls for allocators, and also a more convenient way to resize
Allocator_Helpers :: module
	import Upp~Type_Handle as Type
	import Upp~size_of
	import Upp~align_of
	
	context add_dot_call(allocate)
	context add_dot_call(free)
	context add_dot_call(allocate_array, false, "allocate")
	context add_dot_call(free_array, false, "free")
	context add_dot_call(allocate_bytes, false, "allocate")
	context add_dot_call(free_bytes, false, "free")
	
	allocate :: (allocator: *Allocator, $T: Type) -> *T
		return cast_pointer {*T} allocator.allocate_fn(allocator, size_of(T), align_of(T))
	
	free :: (allocator: *Allocator, data: *$T)
		allocator.free_fn(allocator, cast_pointer {byte_pointer} data, size_of(T))
	
	allocate_array :: (allocator: *Allocator, $T: Type, count: u64) -> []T
		result: []T
		result.size = size_of(T) * count
		if result.size == 0
			result.data =* null
			return result
		
		result.data =* cast_pointer {*T} allocator.allocate_fn(allocator, result.size, Upp~align_of(T))
		return result
	
	free_array :: (allocator: *Allocator, array: []$T)
		allocator.free_fn(allocator, cast_pointer {byte_pointer} array.data.value, size_of(T) * array.size)
	
	allocate_bytes :: (allocator: *Allocator, count: u64) -> Bytes
		result: Bytes
		result.data =* cast_pointer allocator.allocate_fn(allocator, count, 1)
		result.size = count
		return result
	
	free_bytes :: (allocator: *Allocator, bytes: Bytes)
		allocator.free_fn(allocator, cast_pointer bytes.data.value, bytes.size)

Math :: module
	max :: (a: u64, b: u64) -> u64
		if a > b
			return a
		return b
	
	min :: (a: u64, b: u64) -> u64
		if a < b
			return a
		return b
	
	round_next_multiple :: (x: u64, multiple: u64) -> u64
		mod := x % multiple
		if mod == 0
			return x
		return x + (multiple - mod)

Memory :: module
	contains_address :: (memory: Bytes, pointer: byte_pointer) -> bool
		if !memory.data?
			return false
		
		start := cast_pointer {u64} memory.data.value
		address := cast_pointer {u64} pointer
		
		return address >= start && address < start + memory.size

Arena :: module
	
	context import Allocator_Helpers
	
	Context :: module
		context add_dot_call(destroy)
		context add_dot_call(reserve)
		context add_dot_call(allocate)
		context add_dot_call(free)
		context add_dot_call(resize)
	
	Arena :: struct
		allocator: Allocator
		parent_allocator: *Allocator
		buffer: Bytes
		in_use: u64
	
	create :: (allocator: *Allocator, capacity: u64 = 0) -> Arena
		buffer: Bytes
		buffer.data =* null
		buffer.size = 0
		
		result := Arena.{
			.{cast_pointer allocate, cast_pointer free, cast_pointer resize}
			allocator, buffer, 0
		}
		reserve(result, capacity)
		return result
	
	destroy :: (arena: *Arena)
		buffer := arena.buffer
		while buffer.data?
			next_buffer: Bytes = cast_pointer {*Bytes} buffer.data.value
			arena.parent_allocator.free(buffer)
			buffer = next_buffer
		arena.buffer = .{null, 0}
	
	reserve :: (arena: *Arena, capacity: u64)
		if arena.buffer.size >= capacity
			return
		
		// First block reservation
		if arena.buffer.size == 0
			// Note: First bytes are used to store previous allocations
			arena.buffer = arena.parent_allocator.allocate(capacity + Upp~size_of(Bytes))
			cast_pointer {*Bytes} arena.buffer.data.value = Bytes.{null, 0}
			arena.in_use = Upp~size_of(Bytes)
			return
		
		// Otherwise find next buffer size
		next_size := arena.buffer.size
		while next_size < capacity
			next_size *= 2
		
		// Test if resize is possible
		if arena.parent_allocator.resize_fn(arena.parent_allocator, arena.buffer.data.value, arena.buffer.size, next_size)
			return
		
		// Allocate new buffer
		next_buffer := arena.parent_allocator.allocate(next_size)
		cast_pointer {*Bytes} next_buffer.data.value = arena.buffer // Store reference to old buffer
		
		arena.in_use = Upp~size_of(Bytes)
		arena.buffer = next_buffer
	
	allocate :: (arena: *Arena, size: u64, alignment: u32) -> byte_pointer
		reserve(arena, arena.in_use + size + cast alignment)
		next_address: u64 = cast_pointer {u64} * arena.buffer[arena.in_use]
		result := Math~round_next_multiple(next_address, cast alignment)
		arena.in_use += result - next_address + size
		return cast_pointer {byte_pointer} result
	
	free :: (arena: *Arena, pointer: byte_pointer, size: u64)
		if !Memory~contains_address(arena.buffer, pointer)
			return 
		
		// Check if this was last allocation
		address: u64 = cast_pointer {u64} pointer
		arena_start: u64 = cast_pointer {u64} arena.buffer.data.value
		if address + size == arena_start + arena.in_use
			arena.in_use -= size
	
	resize :: (arena: *Arena, pointer: byte_pointer, prev_size: u64, new_size: u64) -> bool
		if !Memory~contains_address(arena.buffer, pointer) || new_size <= prev_size
			return false
		
		// Check if this was last allocation
		address: u64 = cast_pointer {u64} pointer
		arena_start: u64 = cast_pointer {u64} arena.buffer.data.value
		if address + prev_size != arena_start + arena.in_use
			return false
		
		// Check if we have enough space available
		if address + new_size <= arena_start + arena.buffer.size
			arena.in_use += new_size - prev_size
			return true
		
		// Otherwise try to grow current buffer
		required_size := address + new_size - (arena_start + arena.buffer.size)
		if arena.parent_allocator.resize_fn(arena.parent_allocator, arena.buffer.data.value, arena.buffer.size, required_size)
			arena.in_use += new_size - prev_size
			return true
		
		return false
	
	test :: ()
		import Upp~*
		
		context import Context
		
		arena := Arena~create(global_allocator, 64)
		i :=* arena.allocator.allocate(int)
		
		print_string("First alloc ")
		print_i32(cast arena.in_use)
		print_line()
		
		i = 15
		j :=* arena.allocator.allocate(int)
		arena.allocator.free(j)
		
		k := arena.allocator.allocate(int, 15)
		arena.allocator.free(k)
		
		print_string("Second alloc ")
		print_i32(cast arena.in_use)
		print_line()
		
		arena.allocator.free_fn(arena.allocator, cast_pointer i, size_of(int))
		print_string("First free ")
		print_i32(cast arena.in_use)
		print_line()
		
		arena.allocator.free_fn(arena.allocator, cast_pointer j, size_of(int))
		print_string("Second free ")
		print_i32(cast arena.in_use)
		print_line()
		
		arena.destroy()
	


