INET :: module
{
    Address :: union
    {
        ipv4: [4]i8;
        ipv5: struct {
            port: int;
            alive: bool;
        };
        ipv6: String;
    }

    print_address :: (addr: *Address)
    {
        switch addr
        {
            case .ipv4: 
            print_string("ipv4 ");
            i := 0;
            while i < addr.ipv4.size
            {
                print_i32(cast(i32) addr.ipv4[i]);
                if i != addr.ipv4.size - 1 {
                    print_string(".");
                }
                i = i+1;
            }
            case .ipv5: 
            print_string("ipv5 port: ");
            print_i32(addr.ipv5.port);
            print_string(", alive: ");
            print_bool(addr.ipv5.alive);
            case .ipv6: 
            print_string("ipv6 ");
            print_string(addr.ipv6);
        }
    }
}

bake_test :: ()
{
    
}


    
main :: () 
{
    
    addr_v4 := INET~Address.{ipv4 = .[cast(i8) 127, cast(i8)0, cast(i8)0, cast(i8)1]};
    addr_v5 := INET~Address.{ipv5 = .{port = 5, alive = true}};
    addr_v6 := INET~Address.{ipv6 = "CAFF::FFEE"};
    
    INET~print_address(addr_v4);
    print_line();
    INET~print_address(addr_v5);
    print_line();
    INET~print_address(addr_v6);
    print_line();
    print_line();
    
    defer {
        print_string("Hello World");
        print_string("\n And me");
    }
}
















